#!/bin/bash
set -e

function verbose {
    [ "$VERBOSE" -gt 0 ]
}

function help {
    usage
    echo
    echo "Arguments:"
    echo -e "STATUS\t\tStatus of the alert. One of: ok, warn, crit, ack"
    echo -e "SUBJECT\t\tName of hostname, application, service, etc"
    echo -e "CHECK\t\tOptional specific check about SUBJECT"
    echo
    echo "Optional Parameters:"
    echo -e "-d,--description DESC\t\tAdd text description about the alert"
    echo -e "-c,--cluster CLUSTER\t\tName of cluster/logical group SUBJECT is a member of"
    echo -e "-t,--time TIME\t\t\tOverride timestamp of alert, in unix time (default: now)"
    echo -e "-e,--extra-var ATTR=VALUE\tAdd a custom attribute to the alert. Can be repeated."
    echo -e "-p,--primary ATTR\t\tOverride primary attribute name (default: host)"
    echo -e "-s,--secondary ATTR\t\tOverride secondary attribute name (default: check)"
    echo -e "-v,--verbose\t\t\tPrint more info while running"
    echo -e "-h,--help\t\t\tPrint this help screen and exit"
    echo
    echo "Examples:"
    echo "Send an alert about a host being down:"
    echo "  $0 crit prod-server-1 alive_check -d 'Ping failed'"
    echo
    echo "Acknowledge a problem and add more info:"
    echo " $0 ack prod-server-1 alive_check -e wiki_link=http://wiki.acme.com/1234"
}

function get_status {
    case "$1" in
        ok) ret=ok ;;
        warn) ret=warning ;;
        crit) ret=critical ;;
        ack) ret=acknowledged ;;
        *) ret=
    esac

    echo $ret
}

function sanitize {
    echo "$1" | tr '"' _
}

function usage {
    echo "Usage: $0 [-v] [ALERT_INFO] STATUS SUBJECT [CHECK]"
    echo "Send alert to BigPanda"
}

function parse_args {
    while [ -n "$1" ]; do
        case "$1" in
            -h|--help)
                help $command
                exit
                ;;
            -p|--primary)
                shift
                if [ -z "$1" ]; then
                    echo "$0: missing primary attribute name"
                    exit 1
                fi
                PRIMARY_ATTR=`sanitize "$1"`
                ;;
            -s|--secondary)
                shift
                if [ -z "$1" ]; then
                    echo "$0: missing secondary attribute name"
                    exit 1
                fi
                SECONDARY_ATTR=`sanitize "$1"`
                ;;
            -d|--description)
                shift
                if [ -z "$1" ]; then
                    echo "$0: missing description for -d"
                    exit 1
                fi
                DESCRIPTION=`sanitize "$1"`
                ;;
            -c|--cluster)
                shift
                if [ -z "$1" ]; then
                    echo "$0: missing cluster for -C"
                    exit 1
                fi
                CLUSTER=`sanitize "$1"`
                ;;
            -t|--time)
                shift
                if [ -z "$1" ]; then
                    echo "$0: missing timestamp for -t"
                    exit 1
                fi
                TIMESTAMP=$1
                ;;
            -e|--extra-attr)
                shift
                if [ -z "$1" ] || ! [[ "$1" =~ = ]]; then
                    echo "$0: missing attribute and value"
                fi
                EXTRA_ATTRS+=(`sanitize "$1"`)
                ;;
            -v|--verbose) VERBOSE=1 ;;
            -*)
                echo "$0: Illegal option: $1"
                usage
                echo "Run $0 --help for more info"
                exit 1
                ;;
            *)
                if [ -z "$STATUS" ]; then
                    STATUS=`get_status "$1"`
                    if [ -z "$STATUS" ]; then
                        echo "$0: Invalid status $1">&2
                        exit 1
                    fi
                elif [ -z "$PRIMARY_VALUE" ]; then
                    PRIMARY_VALUE=`sanitize "$1"`
                elif [ -z "$SECONDARY_VALUE" ]; then
                    SECONDARY_VALUE=`sanitize "$1"`
                else
                    echo "$0: Too many arguments." >&2
                    exit 1
                fi
        esac
        shift
    done
}

function verify_args {
    if [ -z "$STATUS" ]; then
        echo "$0: Missing status for alert"
        return 1
    fi

    if [ -z "$PRIMARY_VALUE" ]; then
        echo "$0: Missing subject for alert"
        return 1
    fi

    if [ -z "$PRIMARY_ATTR" ]; then
        echo "$0: Invalid primary key"
        return 1
    fi

    if [ -z "$SECONDARY_ATTR" ]; then
        echo "$0: Invalid secondary key"
        return 1
    fi

    if [[ "$TIMESTAMP" =~ [^0-9] ]]; then
        echo "$0: Invalid timestamp"
        return 1
    fi
}

function generate_tmpfile {
    cat >$TMPFILE <<EOF
{
  "app_key": "$BP_APP_KEY",
  "status": "$STATUS",
  "$PRIMARY_ATTR": "$PRIMARY_VALUE",
  "$SECONDARY_ATTR": "$SECONDARY_VALUE",
  "primary_property": "$PRIMARY_ATTR",
  "secondary_property": "$SECONDARY_ATTR",
EOF

    [ -n "$DESCRIPTION" ] && echo "  \"description\": \"$DESCRIPTION\"," >>$TMPFILE
    [ -n "$CLUSTER" ] && echo "  \"cluster\": \"$CLUSTER\"," >>$TMPFILE
    for e in "${EXTRA_ATTRS[@]}"; do
        key=${e%%=*}
        value=${e#*=}
        echo "  \"$key\": \"$value\","
    done >>$TMPFILE

    cat >>$TMPFILE <<EOF
  "timestamp": $TIMESTAMP
}
EOF
}

function print_args {
    echo \* Running with args:
    cat <<EOF
    STATUS=$STATUS
    PRIMARY_ATTR=$PRIMARY_ATTR
    SECONDARY_ATTR=$SECONDARY_ATTR
    PRIMARY_VALUE=$PRIMARY_VALUE
    SECONDARY_VALUE=$SECONDARY_VALUE
    TIMESTAMP=$TIMESTAMP
    DESCRIPTION=$DESCRIPTION
    CLUSTER=$CLUSTER
    EXTRA_ATTRS=${EXTRA_ATTRS[@]}
    BP_API_TOKEN=$BP_API_TOKEN
    BP_APP_KEY=$BP_APP_KEY
    BP_BASE_URL=$BASE_URL
EOF
}

function api_call {
    CURL=(curl -s -i -X POST -H "Authorization: Bearer $BP_API_TOKEN" -H "Content-Type: application/json" -d "@$TMPFILE" "$@")
    output=`"${CURL[@]}"`
    first_line=`echo "$output" | head -1`

    if [[ "$first_line" =~ ^HTTP/...\ 20. ]]; then
        ret=0
    else
        ret=2
    fi

    if verbose; then
       echo "$output"
    else
        echo "$first_line"
    fi

    return $ret
}

TMPFILE=/tmp/bigpanda_alert
BASE_URL=${BP_BASE_URL:-https://api.bigpanda.io}
API_ENDPOINT="data/v2/alerts"
VERBOSE=0
PRIMARY_ATTR=host
SECONDARY_ATTR=check
PRIMARY_VALUE=
SECONDARY_VALUE=
STATUS=
TIMESTAMP=`date +%s`
DESCRIPTION=
CLUSTER=
EXTRA_ATTRS=()

parse_args "$@"

if ! verify_args; then
    usage
    exit 1
fi >&2

if [ -z "$BP_API_TOKEN" -o -z "$BP_APP_KEY" ]; then
    echo "$0: Please set \$BP_API_TOKEN and \$BP_APP_KEY." >&2
    exit 1
fi

if ! which curl >/dev/null; then
    echo "$0: Please install curl." >&2
    exit 1
fi

verbose && print_args

verbose && echo \* Using temp file $TMPFILE

generate_tmpfile

if verbose; then
    echo "* Sending this playload:"
    cat $TMPFILE
    echo
fi

verbose && echo "* POSTing to $BASE_URL/$API_ENDPOINT"
api_call "$BASE_URL/$API_ENDPOINT"

verbose && echo "* Removing temp file $TMPFILE"
rm $TMPFILE
